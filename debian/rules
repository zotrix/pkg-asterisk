#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# This file is public domain software, originally written by Joey Hess. 

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This is the debhelper compatibility version to use.
export DH_COMPAT=4

export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
  confflags += --build $(DEB_HOST_GNU_TYPE)
else
  confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
endif

export PROC := $(shell dpkg-architecture -qDEB_BUILD_GNU_CPU)

MAKEFLAGS = OPTIMIZE=-O2 MAKECMDGOALS=dont-optimize

# Force music files selection:
MAKEFLAGS += MENUSELECT_MOH= \
  ASTDATADIR=/usr/share/asterisk \
  ASTVARRUNDIR=/var/run/asterisk \


ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -g
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif

include /usr/share/dpatch/dpatch.make

DEBVERSION:=$(shell head -n 1 debian/changelog \
		    | sed -e 's/^[^(]*(\([^)]*\)).*/\1/')
UPVERSION:=$(shell echo $(DEBVERSION) | sed -e 's/^.*://' -e 's/-[0-9.]*$$//' -e 's/.dfsg$$//')

FILENAME := asterisk_$(UPVERSION)~dfsg.orig.tar.gz
UPFILENAME := asterisk_$(UPVERSION).orig.tar.gz
URL := http://ftp2.digium.com/pub/asterisk/releases/asterisk-$(UPVERSION).tar.gz

# make sure we have 'fetch' . We need to have either wget or fetch
# on the system. However it is generally not a good idea to actually
# get remote tarballs at build time. So if nither wget nor fetch 
# happen to be installed, the configure script will find a dummy
# fetch script that always returns an error.
FETCH_ENV = PATH=$$PATH:$(CURDIR)/debian/dummyprogs


check-sounds:
	( [ ! -f sounds/asterisk-moh-freeplay-wav.tar.gz ] && \
	  [ ! -f sounds/fpm-calm-river.mp3 ] && \
	  [ ! -f sounds/fpm-sunshine.mp3 ]   && \
	  [ ! -f sounds/fpm-world-mix.mp3 ] ) || \
		(echo "WARNING: fpm sounds must to be removed from sources before packaging." ; false )
	touch $@
	
BRISTUFF_DIR=debian/build/asterisk-bristuff
config.status: check-sounds patch-stamp
	dh_testdir
	# Add here commands to configure the package.
	#touch .cleancount
	#- (cd editline ; \
	#if [ -f config.sub.old ]; then \
	#  rm -f config.sub; \
	#else \
	#  mv config.sub config.sub.old; \
	#fi; \
	#if [ -f config.guess.old ]; then \
	#  rm -f config.guess; \
	#else \
	#  mv config.guess config.guess.old; \
	#fi; \
	#ln -s /usr/share/misc/config.sub config.sub; \
	#ln -s /usr/share/misc/config.guess config.guess; \
	#cd ..)

	#cd editline;./configure $(confflags)

	if [ ! -r configure.debian_sav ]; then cp -a configure configure.debian_sav; fi
	#./bootstrap.sh # also runs autoonf. TODO: currently not needed.
	
	# Without --with-gsm the internal gsm will be used
	$(FETCH_ENV) ./configure --with-gsm \
		--with-pwlib=/usr/share/pwlib/include/ --with-h323=/usr/share/openh323/ \
		--host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE) \
                --prefix=/usr \
                --mandir=\$${prefix}/share/man \
                --infodir=\$${prefix}/share/info


menuselect.makeopts: config.status
	$(FETCH_ENV) $(MAKE) menuselect.makeopts
	sed -i -e '/^MENUSELECT_MOH=/d' menuselect.makeopts

	# some voodoo in order to get chan_h323 built, and make it in one
	# build pass:
	# enable chan_h323 (not enabled by default). Note that modules listed
	# in MENUSELECT_CHANNEL are ones to disable:
	sed -i -e '/MENUSELECT_CHANNELS=/s/chan_h323//' menuselect.makeopts
	touch channels/Makefile.ast

build-arch: build-arch-stamp
build-arch-stamp: menuselect.makeopts
	dh_testdir

	# Add here command to compile/build the package.
	$(FETCH_ENV) $(MAKE) $(MAKEFLAGS)
	#$(MAKE) $(MAKEFLAGS) -C channels/h323 opt

	touch $@

build-indep: build-indep-stamp
build-indep-stamp: menuselect.makeopts 
	dh_testdir

	# Add here command to compile/build the arch indep package.
	# It's ok not to do anything here, if you don't need to build
	#  anything for this package.
	#/usr/bin/docbook-to-man debian/asterisk.sgml > asterisk.1
ifndef ASTERISK_NO_DOCS
	$(FETCH_ENV) $(MAKE) progdocs
endif

	touch $@


build: build-arch build-indep

clean: cleaned unpatch 
cleaned:
	dh_testdir
	dh_testroot
	
	# Add here commands to clean up after the build process.
	-$(MAKE) clean
	-$(RM) -rf debian/build
	#-$(RM) utils/streamplayer
	#-$(RM) -fR doc/api agi/eagi-test agi/eagi-sphinx-test
	#-(test -d editline &&cd editline; \
	#if [ -f config.sub.old ]; then \
	#   mv config.sub.old config.sub; \
	#fi; \
	#if [ -f config.guess.old ]; then \
	#   mv config.guess.old config.guess; \
	#fi; \
	#cd ..)
	if [ -r configure.debian_sav ]; then mv configure.debian_sav configure; fi
	-test -d configs && chmod -x configs/*.sample
	-$(RM) -f build-arch-stamp build-indep-stamp config.status check-sounds menuselect.makeopts

	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs var/run/asterisk
	
	# Add here commands to install the package into debian/<packagename>
	$(FETCH_ENV) $(MAKE) DESTDIR=$(CURDIR)/debian/tmp install samples
	mkdir -p $(CURDIR)/debian/tmp/etc/default/
	cp debian/asterisk.default $(CURDIR)/debian/tmp/etc/default/asterisk
	mkdir -p $(CURDIR)/debian/tmp/usr/lib/cgi-bin/asterisk/
	cp contrib/scripts/vmail.cgi $(CURDIR)/debian/tmp/usr/lib/cgi-bin/asterisk/
	chmod +x $(CURDIR)/debian/tmp/usr/lib/cgi-bin/asterisk/vmail.cgi
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/{stereorize,streamplayer}
	# override some default configurations. Leave the original ones
	# in the sample configs:
	cp -a debian/ast_config/* $(CURDIR)/debian/tmp/etc/asterisk
	
	mkdir -p $(CURDIR)/debian/asterisk/usr/share/asterisk/bin
	cp debian/asterisk_fix $(CURDIR)/debian/asterisk/usr/share/asterisk/bin
	chmod +x $(CURDIR)/debian/asterisk/usr/share/asterisk/bin/asterisk_fix
	
	mkdir -p $(CURDIR)/debian/tmp/usr/share/asterisk/firmware/iax
	mkdir -p $(CURDIR)/debian/tmp/usr/share/asterisk/mohmp3
	mkdir -p $(CURDIR)/debian/tmp/var/lib/asterisk
	
	dh_install --sourcedir=debian/tmp
	
	install -m 644 include/asterisk.h $(CURDIR)/debian/asterisk-dev/usr/include/asterisk.h

# Build architecture-independent files here.
binary-indep: build install
	dh_testdir -i
	dh_testroot -i
	dh_installlogrotate -i 
	dh_installdocs -i -XREADME.cygwin
	dh_installexamples -i -XCVS
	dh_installcron -i
	dh_installchangelogs ChangeLog -i
	dh_link -i 
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i


# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir -a
	dh_testroot -a
	dh_installdocs -a
	dh_installman utils/*.1 doc/*.8 contrib/scripts/*.8
	dh_installexamples -a -XCVS
	dh_installchangelogs ChangeLog -a
	dh_installinit -a -- defaults 21
	dh_strip -a
	dh_link -a
	dh_compress -a
	dh_fixperms -a
	dh_installdeb -a
	#rm debian/asterisk/usr/lib/asterisk/modules/pbx_gtkconsole.so
	rm -f debian/asterisk/usr/lib/asterisk/modules/chan_h323.so
	dh_makeshlibs -a 
	dh_shlibdeps -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

print-version:
	@@echo "Debian version:          $(DEBVERSION)"
	@@echo "Upstream version:        $(UPVERSION)"

TMP_TARBALL_TOP=../tarballs/asterisk-$(UPVERSION).tmp/asterisk-$(UPVERSION)
get-orig-source:
	@@dh_testdir
	@@[ -d ../tarballs/. ]||mkdir -p ../tarballs
	@@echo Downloading $(UPFILENAME) from $(URL) ...
	@@wget -N -nv -T10 -t3 -O ../tarballs/$(UPFILENAME) $(URL)
	@@echo Repacking as DFSG-free...
	@@mkdir -p ../tarballs/asterisk-$(UPVERSION).tmp/
	@@cd ../tarballs/asterisk-$(UPVERSION).tmp ; \
	tar xfz ../$(UPFILENAME) 
	@@rm -f  $(TMP_TARBALL_TOP)/sounds/fpm-*.mp3
	@@rm -f  $(TMP_TARBALL_TOP)/sounds/asterisk-moh-freeplay-wav.tar.gz
	@@rm -rf $(TMP_TARBALL_TOP)/codecs/ilbc 
	@@rm -f  $(TMP_TARBALL_TOP)/codecs/codec_ilbc.c
	@@rm -rf $(TMP_TARBALL_TOP)/contrib/firmware/
	@@cd ../tarballs/asterisk-$(UPVERSION).tmp ; \
	tar cfz ../$(FILENAME) *
	@@echo Cleaning up...
	@@$(RM) -rf ../tarballs/asterisk-$(UPVERSION).tmp/

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install clean patch unpatch
