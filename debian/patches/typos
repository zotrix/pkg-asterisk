Author: Tzafrir Cohen <tzafrir.cohen@xorcom.com>
Origin: http://svn.asterisk.org/svn/asterisk/branches/1.6.2@273642
Subject: Fix typos reported by Lintian

Also extra typo fixed in r278934 .

--- a/apps/app_voicemail.c
+++ b/apps/app_voicemail.c
@@ -4500,7 +4500,7 @@ static int add_email_attachment(FILE *p,
 				attach = newtmp;
 				ast_debug(3, "VOLGAIN: Stored at: %s.%s - Level: %.4f - Mailbox: %s\n", attach, format, vmu->volgain, mailbox);
 			} else {
-				ast_log(LOG_WARNING, "Sox failed to reencode %s.%s: %s (have you installed support for all sox file formats?)\n", attach, format,
+				ast_log(LOG_WARNING, "Sox failed to re-encode %s.%s: %s (have you installed support for all sox file formats?)\n", attach, format,
 					soxstatus == 1 ? "Problem with command line options" : "An error occurred during file processing");
 				ast_log(LOG_WARNING, "Voicemail attachment will have no volume gain.\n");
 			}
--- a/channels/chan_dahdi.c
+++ b/channels/chan_dahdi.c
@@ -5018,10 +5018,10 @@ static int dahdi_setoption(struct ast_ch
 	case AST_OPTION_ECHOCAN:
 		cp = (char *) data;
 		if (*cp) {
-			ast_debug(1, "Enabling echo cancelation on %s\n", chan->name);
+			ast_debug(1, "Enabling echo cancellation on %s\n", chan->name);
 			dahdi_enable_ec(p);
 		} else {
-			ast_debug(1, "Disabling echo cancelation on %s\n", chan->name);
+			ast_debug(1, "Disabling echo cancellation on %s\n", chan->name);
 			dahdi_disable_ec(p);
 		}
 		break;
@@ -6806,7 +6806,7 @@ static struct ast_frame *dahdi_read(stru
 
 	/* Hang up if we don't really exist */
 	if (idx < 0)	{
-		ast_log(LOG_WARNING, "We dont exist?\n");
+		ast_log(LOG_WARNING, "We don't exist?\n");
 		ast_mutex_unlock(&p->lock);
 		return NULL;
 	}
--- a/channels/chan_iax2.c
+++ b/channels/chan_iax2.c
@@ -7537,7 +7537,7 @@ static int authenticate_verify(struct ch
 		user = user_unref(user);
 	}
 	if (ast_test_flag(p, IAX_FORCE_ENCRYPT) && !p->encmethods) { 
-		ast_log(LOG_NOTICE, "Call Terminated, Incomming call is unencrypted while force encrypt is enabled.");
+		ast_log(LOG_NOTICE, "Call Terminated, Incoming call is unencrypted while force encrypt is enabled.");
 		return res;
 	}
 	if (!ast_test_flag(&p->state, IAX_STATE_AUTHENTICATED))
--- a/channels/chan_sip.c
+++ b/channels/chan_sip.c
@@ -7509,7 +7509,7 @@ restartsearch:
 	/* We do not respond to responses for dialogs that we don't know about, we just drop
 	   the session quickly */
 	if (intended_method == SIP_RESPONSE)
-		ast_debug(2, "That's odd...  Got a response on a call we dont know about. Callid %s\n", callid ? callid : "<unknown>");
+		ast_debug(2, "That's odd...  Got a response on a call we don't know about. Callid %s\n", callid ? callid : "<unknown>");
 
 	return NULL;
 }
@@ -12789,7 +12789,7 @@ static enum check_auth_result check_auth
 		return AUTH_CHALLENGE_SENT;
 	} 
 	if (good_response) {
-		append_history(p, "AuthOK", "Auth challenge succesful for %s", username);
+		append_history(p, "AuthOK", "Auth challenge successful for %s", username);
 		return AUTH_SUCCESSFUL;
 	}
 
@@ -18663,7 +18663,7 @@ static void handle_response(struct sip_p
 					}
 				}
 			} else
-				ast_log(LOG_NOTICE, "Dont know how to handle a %d %s response from %s\n", resp, rest, p->owner ? p->owner->name : ast_inet_ntoa(p->sa.sin_addr));
+				ast_log(LOG_NOTICE, "Don't know how to handle a %d %s response from %s\n", resp, rest, p->owner ? p->owner->name : ast_inet_ntoa(p->sa.sin_addr));
 		}
 	} else {	
 		/* Responses to OUTGOING SIP requests on INCOMING calls 
--- a/res/res_agi.c
+++ b/res/res_agi.c
@@ -440,7 +440,7 @@ static const char mandescr_asyncagi[] =
 "Variables:\n"
 "  *Channel: Channel that is currently in Async AGI\n"
 "  *Command: Application to execute\n"
-"   CommandID: comand id. This will be sent back in CommandID header of AsyncAGI exec event notification\n"
+"   CommandID: command id. This will be sent back in CommandID header of AsyncAGI exec event notification\n"
 "\n";
 
 static struct agi_cmd *get_agi_cmd(struct ast_channel *chan)
@@ -2433,7 +2433,7 @@ static char usage_recordfile[] =
 " to the offset without exceeding the end of the file.  \"silence\" is the number\n"
 " of seconds of silence allowed before the function returns despite the\n"
 " lack of dtmf digits or reaching timeout.  Silence value must be\n"
-" preceeded by \"s=\" and is also optional.\n";
+" preceded by \"s=\" and is also optional.\n";
 
 static char usage_autohangup[] =
 " Usage: SET AUTOHANGUP <time>\n"
