Author: Tzafrir Cohen <tzafrir.cohen@xorcom.com>
Bug: https://issues.asterisk.org/view.php?id=18863
Bug-Debian: http://bugs.debian.org/549054
Subject: support for gmime 2.4

* Support detecting newer gmime versions (up to 2.4) that use pkg-config.
* Allow building res_http_post.c with newer versions.
* Detecting version is done through a specific constant. Can't think of
  a simpler build-time test.

---
 configure           |  919 +++++++++++++++++++++++----------------------------
 configure.ac        |   21 +-
 res/res_http_post.c |   19 +
 3 files changed, 448 insertions(+), 511 deletions(-)

diff --git a/configure.ac b/configure.ac
index 889586a..892d158 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1995,18 +1995,17 @@ fi
 AST_EXT_TOOL_CHECK([GMIME], [gmime-config], [], [], [#include <gmime/gmime.h>], [gboolean q = g_mime_check_version(0,0,0);])
 if test "x${PBX_GMIME}" = "x0"; then
 	# Later versions of GMime use pkg-config
-	if test "x${PKGCONFIG}" = xNo; then :; else
-		GMIME_INCLUDE=$(${PKGCONFIG} gmime-2.0 --cflags 2>/dev/null)
-		GMIME_LIB=$(${PKGCONFIG} gmime-2.0 --libs)
-		if test "x${GMIME_INCLUDE}${GMIME_LIB}" = "x"; then 
-			GMIME_INCLUDE=$(${PKGCONFIG} gmime-2.2 --cflags 2>/dev/null)
-			GMIME_LIB=$(${PKGCONFIG} gmime-2.2 --libs)
+	for ver in 2.0 2.2 2.4; do
+		if ! ${PKGCONFIG} --exists gmime-$ver; then
+			continue
 		fi
-		if test "x${GMIME_INCLUDE}${GMIME_LIB}" != "x"; then
-			PBX_GMIME=1
-			AC_DEFINE([HAVE_GMIME], 1, [Define if your system has the GMIME libraries.])
-		fi
-	fi
+		# If we got here, we have this version:
+		GMIME_INCLUDE=$(${PKGCONFIG} gmime-$ver --cflags 2>/dev/null)
+		GMIME_LIB=$(${PKGCONFIG} gmime-$ver --libs)
+		PBX_GMIME=1
+		AC_DEFINE([HAVE_GMIME], 1, [Define if your system has the GMIME libraries.])
+		break;
+	done
 fi
 
 AST_EXT_LIB_CHECK([HOARD], [hoard], [malloc], [])
diff --git a/res/res_http_post.c b/res/res_http_post.c
index 5fff5d8..268db01 100644
--- a/res/res_http_post.c
+++ b/res/res_http_post.c
@@ -52,6 +52,11 @@ ASTERISK_FILE_VERSION(__FILE__, "$Revision$")
 
 #define MAX_PREFIX 80
 
+/* gmime 2.4 provides a newer interface. */
+#ifdef GMIME_TYPE_CONTENT_TYPE
+#define AST_GMIME_VER_24
+#endif
+
 /* just a little structure to hold callback info for gmime */
 struct mime_cbinfo {
 	int count;
@@ -84,7 +89,9 @@ static void post_raw(GMimePart *part, const char *post_dir, const char *fn)
 	g_mime_data_wrapper_write_to_stream(content, stream);
 	g_mime_stream_flush(stream);
 
+#ifndef AST_GMIME_VER_24
 	g_object_unref(content);
+#endif
 	g_object_unref(stream);
 }
 
@@ -108,7 +115,11 @@ static GMimeMessage *parse_message(FILE *f)
 	return message;
 }
 
+#ifdef AST_GMIME_VER_24
+static void process_message_callback(GMimeObject *parent, GMimeObject *part, gpointer user_data)
+#else
 static void process_message_callback(GMimeObject *part, gpointer user_data)
+#endif
 {
 	struct mime_cbinfo *cbinfo = user_data;
 
@@ -122,6 +133,7 @@ static void process_message_callback(GMimeObject *part, gpointer user_data)
 		ast_log(LOG_WARNING, "Got unexpected GMIME_IS_MESSAGE_PARTIAL\n");
 		return;
 	} else if (GMIME_IS_MULTIPART(part)) {
+#ifndef AST_GMIME_VER_24
 		GList *l;
 		
 		ast_log(LOG_WARNING, "Got unexpected GMIME_IS_MULTIPART, trying to process subparts\n");
@@ -130,6 +142,9 @@ static void process_message_callback(GMimeObject *part, gpointer user_data)
 			process_message_callback(l->data, cbinfo);
 			l = l->next;
 		}
+#else
+		ast_log(LOG_WARNING, "Got unexpected MIME subpart.\n");
+#endif
 	} else if (GMIME_IS_PART(part)) {
 		const char *filename;
 
@@ -151,7 +166,11 @@ static int process_message(GMimeMessage *message, const char *post_dir)
 		.post_dir = post_dir,
 	};
 
+#ifdef AST_GMIME_VER_24
+	g_mime_message_foreach(message, process_message_callback, &cbinfo);
+#else
 	g_mime_message_foreach_part(message, process_message_callback, &cbinfo);
+#endif
 
 	return cbinfo.count;
 }
-- 
1.7.4.1

