Change the API of ast_sendtext and chan->sendtext to add dest and ispdu
parameters, used by ast_send_message which is also introduced by this patch.

--- a/include/asterisk/channel.h
+++ b/include/asterisk/channel.h
@@ -247,6 +247,9 @@ struct ast_channel_tech {
 	/*! \brief Display or transmit text */
 	int (* const send_text)(struct ast_channel *chan, const char *text);
 
+	/*! \brief send a message */
+	int (* const send_message)(struct ast_channel *chan, const char *dest, const char *text, int ispdu);
+
 	/*! \brief Display or send an image */
 	int (* const send_image)(struct ast_channel *chan, struct ast_frame *frame);
 
@@ -689,6 +692,16 @@ struct ast_channel *ast_request_and_dial
 
 struct ast_channel *__ast_request_and_dial(const char *type, int format, void *data, int timeout, int *reason, const char *cidnum, const char *cidname, struct outgoing_helper *oh);
 
+/*! \brief "Requests" a channel for sending a message
+ * \param type type of channel to request
+ * \param data data to pass to the channel requester
+ * \param status status
+ * Request a channel of a given type, with data as optional information used
+ * by the low level module
+ * \return Returns 0 on success, -1 on failure.
+ */
+int ast_send_message(const char *type, void *data, char *to, char *from, char *message, int ispdu);
+
 /*!\brief Register a channel technology (a new channel driver)
  * Called by a channel module to register the kind of channels it supports.
  * \param tech Structure defining channel technology or "type"
@@ -910,6 +923,16 @@ int ast_set_write_format(struct ast_chan
  */
 int ast_sendtext(struct ast_channel *chan, const char *text);
 
+/*! \brief Sends message to a channel
+ * Write text to a display on a channel
+ * \param chan channel to act upon
+ * \param dest destination number/user
+ * \param text string of text to send on the channel
+ * \param ispdu message is in PDU format
+ * \return Returns 0 on success, -1 on failure
+ */
+int ast_sendmessage(struct ast_channel *chan, const char *dest, const char *text, int ispdu);
+
 /*! \brief Receives a text character from a channel
  * \param chan channel to act upon
  * \param timeout timeout in milliseconds (0 for infinite wait)
--- a/main/channel.c
+++ b/main/channel.c
@@ -2448,6 +2448,19 @@ int ast_sendtext(struct ast_channel *cha
 	return res;
 }
 
+int ast_sendmessage(struct ast_channel *chan, const char *dest, const char *text, int ispdu)
+{
+	int res = 0;
+	/* Stop if we're a zombie or need a soft hangup */
+	if (ast_test_flag(chan, AST_FLAG_ZOMBIE) || ast_check_hangup(chan))
+		return -1;
+	CHECK_BLOCKING(chan);
+	if (chan->tech->send_message)
+		res = chan->tech->send_message(chan, dest, text, ispdu);
+	ast_clear_flag(chan, AST_FLAG_BLOCKING);
+	return res;
+}
+
 int ast_senddigit_begin(struct ast_channel *chan, char digit)
 {
 	/* Device does not support DTMF tones, lets fake
@@ -4487,6 +4500,25 @@ void ast_channel_stop_silence_generator(
 }
 
 
+int ast_send_message(const char *type, void *data, char *to, char *from, char *message, int ispdu) {
+	struct ast_channel *chan = NULL;
+	int status;
+	int res = -1;
+
+	chan = ast_request(type, AST_FORMAT_SLINEAR, data, &status);
+	if (chan) {
+	    if (from) {
+		ast_set_callerid(chan, from, from, from);
+	    }
+	    res = ast_sendmessage(chan, to, message, ispdu);
+	    /* XXX what about message CDRs ??? XXX */
+	    ast_hangup(chan);
+	    return res;
+	}
+
+	return res;
+}
+
 /*! \ brief Convert channel reloadreason (ENUM) to text string for manager event */
 const char *channelreloadreason2txt(enum channelreloadreason reason)
 {
